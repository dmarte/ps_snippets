var o = Object.defineProperty;
var c = (s, e, t) => e in s ? o(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t;
var n = (s, e, t) => (c(s, typeof e != "symbol" ? e + "" : e, t), t);
import l from "../../libs/lib-alpine.js";
class u {
  constructor(e) {
    n(this, "$config");
    this.$config = e;
  }
  async get(e, t) {
    const a = await fetch(this.url(e, t));
    return a.ok ? {
      failed: !1,
      message: a.statusText,
      data: await a.json() || await a.text()
    } : {
      failed: !0,
      message: a.statusText,
      data: {}
    };
  }
  url(e, t) {
    const a = new URLSearchParams(t);
    this.$config.authorization === "key" && a.set(this.$config.apiKeyName, this.$config.apiToken);
    const i = a.toString();
    return new URL(`${e}${i ? "?" + i : ""}`, this.$config.baseUrl);
  }
}
class d {
  constructor({ api: e, cache: t, key: a, debug: i, filters: r }) {
    n(this, "$api");
    n(this, "$cache");
    n(this, "$key");
    n(this, "$debugging");
    n(this, "$filters");
    n(this, "$state", l.reactive({
      season: "",
      loading: !1,
      weeks: 0,
      games: [],
      teams: []
    }));
    this.$api = e, this.$cache = t, this.$key = a, this.$debugging = i, this.$filters = r ?? {};
  }
  get weeks() {
    return this.$state.weeks;
  }
  get games() {
    return this.collectByFilters(this.$state.games);
  }
  get channels() {
    return [...new Set(this.games.map((e) => e.Channel))];
  }
  get season() {
    return this.$state.season;
  }
  get teams() {
    return this.$state.teams;
  }
  get loading() {
    return this.$state.loading;
  }
  get currentWeek() {
    var e, t;
    return ((t = (e = this.games) == null ? void 0 : e.at(0)) == null ? void 0 : t.Week) ?? 0;
  }
  /**
   * Initialize the instance state.
   */
  async initialize() {
    return this.$state.loading = !0, this.$debugging ? this.$state = await this.initState() : this.$state = await this.$cache.get(`NFLInstance.sync.${this.$key}`, async ({ cancel: e }) => {
      const t = await this.initState();
      return t.teams.length < 1 || t.games.length < 1 || !t.season ? e(t) : t;
    }), this.$state.loading = !1, this;
  }
  async fetchSeasonCurrent() {
    const {
      data: e,
      failed: t
    } = await this.$api.get("scores/json/CurrentSeason");
    return t ? (/* @__PURE__ */ new Date()).getFullYear().toString() : e;
  }
  async fetchSeasonGames(e) {
    const {
      data: t,
      failed: a,
      message: i
    } = await this.$api.get(`scores/json/Scores/${e}`);
    if (a)
      throw TypeError(`NFLInstance.fetchSeasonGames: ${i}`);
    return t;
  }
  async fetchSeasonTeams(e) {
    const {
      data: t,
      failed: a,
      message: i
    } = await this.$api.get(`scores/json/Teams/${e}`);
    if (a)
      throw TypeError(`NFLInstance.fetchSeasonTeams: ${i}`);
    return t;
  }
  // private isDateInCurrentWeek(date: Date, now: Date = new Date()) {
  //
  //   const currentWeekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay() + 1);
  //   const currentWeekEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate() + (7 - now.getDay()));
  //
  //   return date >= currentWeekStart && date <= currentWeekEnd;
  // }
  collectByFilters(e) {
    var t;
    return (t = this.$filters) != null && t.date && (e = this.collectByFilterDate(e, this.$filters.date)), e;
  }
  collectByFilterChannels(e, t) {
    return e.filter((a) => t.includes(a.Channel));
  }
  collectByFilterDate(e, t) {
    return e.filter((a) => a.Day.substring(0, 10) === t.substring(0, 10));
  }
  async initState() {
    const e = await this.fetchSeasonCurrent(), t = await this.fetchSeasonGames(e), a = await this.fetchSeasonTeams(e), i = t.reduce((r, h) => r < h.Week ? h.Week : r, 0);
    return {
      season: e,
      teams: a,
      games: t,
      weeks: i,
      loading: !1
    };
  }
}
function g(s) {
  return {
    api: s.nfl,
    opened: !1,
    selected: {},
    homeTeam: {},
    awayTeam: {},
    async init() {
      !this.loading && !s.nfl.season && this.api.initialize();
    },
    get currentWeek() {
      var e;
      return ((e = s.nfl) == null ? void 0 : e.currentWeek) ?? 0;
    },
    get weeks() {
      return s.nfl.weeks;
    },
    get loading() {
      return s.nfl.loading;
    },
    get games() {
      return s.nfl.games;
    },
    get hasNoAvailableGames() {
      return !this.loading && this.games.length < 1;
    },
    get isReady() {
      return !this.opened && !this.loading && this.games.length > 0;
    },
    get stage() {
      if (!this.selected)
        return "";
      const e = this.selected;
      return e.Status === "Scheduled" ? new Intl.DateTimeFormat(void 0, {
        hourCycle: "h12",
        hour: "2-digit",
        minute: "2-digit"
      }).format(new Date(e.DateTime)) : e.QuarterDescription ?? e.Status;
    },
    team(e) {
      return s.nfl.teams.find((t) => t.TeamID === e) ?? {};
    },
    open(e) {
      this.selected = e, this.homeTeam = this.team(e.HomeTeamID), this.awayTeam = this.team(e.AwayTeamID), this.opened = !0;
    },
    close() {
      this.selected = {}, this.homeTeam = {}, this.awayTeam = {}, this.opened = !1;
    }
  };
}
class $ {
  constructor() {
    /**
     * Network Service
     */
    n(this, "api");
    /**
     * Caching service
     */
    n(this, "cache");
    /**
     * NFL Service
     * @protected
     */
    n(this, "service");
    /**
     * Alpine service.
     * @protected
     */
    n(this, "alpine");
  }
  key() {
    return "SportDataNFL";
  }
  async boot({
    debug: e,
    parameters: t
  }) {
    if (!this.cache)
      throw TypeError("[PadSquad]:NFL - Service [cache] is required.");
    if (!this.api)
      throw TypeError("[PadSquad]:NFL - Service [api] is required.");
    if (!this.service)
      throw TypeError("[PadSquad]:NFL - Service [NFL] must be instantiated.");
    return e && console.debug(`[PadSquad]:${this.key()} Sport data BOOTED.`), t != null && t.startOnBoot && await this.service.initialize(), this.service;
  }
  async register(e) {
    var t, a, i, r;
    e.debug && console.debug(`[PadSquad]:${this.key()} Sport data REGISTERED.`), this.api = new u({
      apiToken: `${(t = e.parameters) == null ? void 0 : t.token}`,
      baseUrl: "https://api.sportsdata.io/v3/nfl/",
      apiKeyName: "key",
      authorization: "key"
    }), this.cache = e.engine.get("cache"), this.service = new d({
      key: ((a = e.parameters) == null ? void 0 : a.date) ?? (/* @__PURE__ */ new Date()).toISOString(),
      api: this.api,
      debug: e.debug,
      cache: this.cache,
      filters: {
        date: (i = e.parameters) == null ? void 0 : i.date,
        channels: (r = e.parameters) == null ? void 0 : r.channels
      }
    }), document.addEventListener("alpine:init", () => {
      this.alpine = e.engine.get("alpine"), this.registerComponents(e);
    });
  }
  registerComponents({ parameters: e }) {
    var t;
    (t = this.alpine) == null || t.data(
      "NFLGamesByDate",
      (a) => g({
        nfl: this.service,
        date: a ?? (e == null ? void 0 : e.date)
      })
    );
  }
}
export {
  $ as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmZsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29yZS9TdXBwb3J0L1BzQXBpLnRzIiwiLi4vLi4vLi4vc3JjL3BhY2thZ2UvU3BvcnREYXRhL1NlcnZpY2VzL05mbEluc3RhbmNlLnRzIiwiLi4vLi4vLi4vc3JjL3BhY2thZ2UvU3BvcnREYXRhL0NvbXBvbmVudHMvTkZMR2FtZXNCeURhdGUudHMiLCIuLi8uLi8uLi9zcmMvcGFja2FnZS9TcG9ydERhdGEvUHJvdmlkZXJzL1Nwb3J0RGF0YU5GTFByb3ZpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGF1dGhvciBEZWx2aSBNYXJ0ZSA8ZGVsdmkubWFydGVAZ21haWwuY29tPlxuICogQHBhY2thZ2UgUGFkc3F1YWQvU3VwcG9ydFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQc0FwaSB7XG4gIHByaXZhdGUgJGNvbmZpZzogUHMuU3VwcG9ydC5BcGkuQ29uZmlnXG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBQcy5TdXBwb3J0LkFwaS5Db25maWcpIHtcbiAgICB0aGlzLiRjb25maWcgPSBjb25maWdcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXQ8VD4ocGF0aDogc3RyaW5nLCBwYXJhbXM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLnVybChwYXRoLCBwYXJhbXMpKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHJldHVybiA8UHMuU3VwcG9ydC5BcGkuUmVzcG9uc2U+e1xuICAgICAgICBmYWlsZWQ6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgIGRhdGE6IHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiA8UHMuU3VwcG9ydC5BcGkuUmVzcG9uc2U8VD4+e1xuICAgICAgZmFpbGVkOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICBkYXRhOiAoYXdhaXQgcmVzcG9uc2UuanNvbigpKSB8fCAoYXdhaXQgcmVzcG9uc2UudGV4dCgpKSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSB1cmwocGF0aDogc3RyaW5nLCBwYXJhbXM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcylcbiAgICBpZiAodGhpcy4kY29uZmlnLmF1dGhvcml6YXRpb24gPT09ICdrZXknKSB7XG4gICAgICBxdWVyeS5zZXQodGhpcy4kY29uZmlnLmFwaUtleU5hbWUsIHRoaXMuJGNvbmZpZy5hcGlUb2tlbilcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5LnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIG5ldyBVUkwoYCR7cGF0aH0ke3F1ZXJ5U3RyaW5nID8gJz8nICsgcXVlcnlTdHJpbmcgOiAnJ31gLCB0aGlzLiRjb25maWcuYmFzZVVybCk7XG4gIH1cbn1cblxuIiwiaW1wb3J0IEFscGluZSBmcm9tIFwiYWxwaW5lanNcIjtcbmltcG9ydCBDaGFubmVscyA9IFBzLlNwb3J0RGF0YS5DaGFubmVscztcblxudHlwZSBORkxJbnN0YW5jZUZpbHRlcnMgPSB7XG4gIGNoYW5uZWxzPzogKENoYW5uZWxzIHwgbnVsbClbXVxuICBkYXRlPzogc3RyaW5nXG59XG50eXBlIE5GTEluc3RhbmNlID0ge1xuICBrZXk6IHN0cmluZ1xuICBkZWJ1ZzogYm9vbGVhblxuICBhcGk6IFBzLlN1cHBvcnQuQXBpLkluc3RhbmNlLFxuICBjYWNoZTogUHMuU3VwcG9ydC5DYWNoZS5JbnN0YW5jZSxcbiAgZmlsdGVycz86IE5GTEluc3RhbmNlRmlsdGVyc1xufVxudHlwZSBORkxJbnN0YW5jZVN0YXRlID0ge1xuICBzZWFzb246IHN0cmluZ1xuICB3ZWVrczogbnVtYmVyXG4gIGdhbWVzOiBQcy5TcG9ydERhdGEuTkZMLkdhbWVTY29yZVtdXG4gIHRlYW1zOiBQcy5TcG9ydERhdGEuTkZMLlRlYW1bXVxuICBsb2FkaW5nOiBib29sZWFuXG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZmxJbnN0YW5jZSBpbXBsZW1lbnRzIFBzLlNwb3J0RGF0YS5ORkwuSW5zdGFuY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5ICRhcGk6IFBzLlN1cHBvcnQuQXBpLkluc3RhbmNlO1xuICBwcml2YXRlIHJlYWRvbmx5ICRjYWNoZTogUHMuU3VwcG9ydC5DYWNoZS5JbnN0YW5jZTtcbiAgcHJpdmF0ZSByZWFkb25seSAka2V5OiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgJGRlYnVnZ2luZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWFkb25seSAkZmlsdGVyczogTkZMSW5zdGFuY2VGaWx0ZXJzO1xuXG4gIHByaXZhdGUgJHN0YXRlOiBORkxJbnN0YW5jZVN0YXRlID0gQWxwaW5lLnJlYWN0aXZlKHtcbiAgICBzZWFzb246ICcnLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIHdlZWtzOiAwLFxuICAgIGdhbWVzOiBbXSxcbiAgICB0ZWFtczogW11cbiAgfSlcblxuICBjb25zdHJ1Y3Rvcih7YXBpLCBjYWNoZSwga2V5LCBkZWJ1ZywgZmlsdGVyc306IE5GTEluc3RhbmNlKSB7XG4gICAgdGhpcy4kYXBpID0gYXBpXG4gICAgdGhpcy4kY2FjaGUgPSBjYWNoZVxuICAgIHRoaXMuJGtleSA9IGtleVxuICAgIHRoaXMuJGRlYnVnZ2luZyA9IGRlYnVnXG4gICAgdGhpcy4kZmlsdGVycyA9IGZpbHRlcnMgPz8ge31cbiAgfVxuXG4gIGdldCB3ZWVrcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLiRzdGF0ZS53ZWVrc1xuICB9XG5cblxuICBnZXQgZ2FtZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdEJ5RmlsdGVycyh0aGlzLiRzdGF0ZS5nYW1lcylcbiAgfVxuXG4gIGdldCBjaGFubmVscygpIHtcbiAgICByZXR1cm4gWy4uLm5ldyBTZXQodGhpcy5nYW1lcy5tYXAoZyA9PiBnLkNoYW5uZWwpKV1cbiAgfVxuXG4gIGdldCBzZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJHN0YXRlLnNlYXNvblxuICB9O1xuXG4gIGdldCB0ZWFtcygpOiBQcy5TcG9ydERhdGEuTkZMLlRlYW1bXSB7XG4gICAgcmV0dXJuIHRoaXMuJHN0YXRlLnRlYW1zXG4gIH1cblxuICBnZXQgbG9hZGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4kc3RhdGUubG9hZGluZ1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRXZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmdhbWVzPy5hdCgwKT8uV2VlayA/PyAwXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgaW5zdGFuY2Ugc3RhdGUuXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8UHMuU3BvcnREYXRhLk5GTC5JbnN0YW5jZT4ge1xuICAgIHRoaXMuJHN0YXRlLmxvYWRpbmcgPSB0cnVlXG4gICAgaWYgKHRoaXMuJGRlYnVnZ2luZykge1xuICAgICAgdGhpcy4kc3RhdGUgPSBhd2FpdCB0aGlzLmluaXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRzdGF0ZSA9IGF3YWl0IHRoaXMuJGNhY2hlLmdldDxORkxJbnN0YW5jZVN0YXRlPihgTkZMSW5zdGFuY2Uuc3luYy4ke3RoaXMuJGtleX1gLCBhc3luYyAoe2NhbmNlbH0pID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCB0aGlzLmluaXRTdGF0ZSgpXG4gICAgICAgIGlmIChzdGF0ZS50ZWFtcy5sZW5ndGggPCAxIHx8IHN0YXRlLmdhbWVzLmxlbmd0aCA8IDEgfHwgIXN0YXRlLnNlYXNvbikge1xuICAgICAgICAgIHJldHVybiBjYW5jZWwoc3RhdGUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLiRzdGF0ZS5sb2FkaW5nID0gZmFsc2VcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hTZWFzb25DdXJyZW50KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3Qge1xuICAgICAgZGF0YSxcbiAgICAgIGZhaWxlZFxuICAgIH0gPSBhd2FpdCB0aGlzLiRhcGkuZ2V0PHN0cmluZz4oJ3Njb3Jlcy9qc29uL0N1cnJlbnRTZWFzb24nKTtcbiAgICBpZiAoZmFpbGVkKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKClcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGFzeW5jIGZldGNoU2Vhc29uR2FtZXMoc2Vhc29uOiBzdHJpbmcpOiBQcm9taXNlPFBzLlNwb3J0RGF0YS5ORkwuR2FtZVNjb3JlW10+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhLFxuICAgICAgZmFpbGVkLFxuICAgICAgbWVzc2FnZVxuICAgIH0gPSBhd2FpdCB0aGlzLiRhcGkuZ2V0PFBzLlNwb3J0RGF0YS5ORkwuR2FtZVNjb3JlW10+KGBzY29yZXMvanNvbi9TY29yZXMvJHtzZWFzb259YClcbiAgICBpZiAoZmFpbGVkKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoYE5GTEluc3RhbmNlLmZldGNoU2Vhc29uR2FtZXM6ICR7bWVzc2FnZX1gKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hTZWFzb25UZWFtcyhzZWFzb246IHN0cmluZyk6IFByb21pc2U8UHMuU3BvcnREYXRhLk5GTC5UZWFtW10+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhLFxuICAgICAgZmFpbGVkLFxuICAgICAgbWVzc2FnZVxuICAgIH0gPSBhd2FpdCB0aGlzLiRhcGkuZ2V0PFBzLlNwb3J0RGF0YS5ORkwuVGVhbVtdPihgc2NvcmVzL2pzb24vVGVhbXMvJHtzZWFzb259YClcbiAgICBpZiAoZmFpbGVkKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoYE5GTEluc3RhbmNlLmZldGNoU2Vhc29uVGVhbXM6ICR7bWVzc2FnZX1gKVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLy8gcHJpdmF0ZSBpc0RhdGVJbkN1cnJlbnRXZWVrKGRhdGU6IERhdGUsIG5vdzogRGF0ZSA9IG5ldyBEYXRlKCkpIHtcbiAgLy9cbiAgLy8gICBjb25zdCBjdXJyZW50V2Vla1N0YXJ0ID0gbmV3IERhdGUobm93LmdldEZ1bGxZZWFyKCksIG5vdy5nZXRNb250aCgpLCBub3cuZ2V0RGF0ZSgpIC0gbm93LmdldERheSgpICsgMSk7XG4gIC8vICAgY29uc3QgY3VycmVudFdlZWtFbmQgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIG5vdy5nZXREYXRlKCkgKyAoNyAtIG5vdy5nZXREYXkoKSkpO1xuICAvL1xuICAvLyAgIHJldHVybiBkYXRlID49IGN1cnJlbnRXZWVrU3RhcnQgJiYgZGF0ZSA8PSBjdXJyZW50V2Vla0VuZDtcbiAgLy8gfVxuXG4gIGNvbGxlY3RCeUZpbHRlcnMoY29sbGVjdGlvbjogUHMuU3BvcnREYXRhLk5GTC5HYW1lU2NvcmVbXSk6IFBzLlNwb3J0RGF0YS5ORkwuR2FtZVNjb3JlW10ge1xuXG4gICAgaWYgKHRoaXMuJGZpbHRlcnM/LmRhdGUpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3RCeUZpbHRlckRhdGUoY29sbGVjdGlvbiwgdGhpcy4kZmlsdGVycy5kYXRlKVxuICAgIH1cbiAgICAvL1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHRoaXMuJGZpbHRlcnM/LmNoYW5uZWxzKSkge1xuICAgIC8vICAgY29sbGVjdGlvbiA9IHRoaXMuY29sbGVjdEJ5RmlsdGVyQ2hhbm5lbHMoY29sbGVjdGlvbiwgdGhpcy4kZmlsdGVycy5jaGFubmVscylcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gY29sbGVjdGlvblxuICB9XG5cbiAgY29sbGVjdEJ5RmlsdGVyQ2hhbm5lbHMoY29sbGVjdGlvbjogUHMuU3BvcnREYXRhLk5GTC5HYW1lU2NvcmVbXSwgY2hhbm5lbHM6IChQcy5TcG9ydERhdGEuQ2hhbm5lbHMgfCBudWxsKVtdKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uZmlsdGVyKGdhbWUgPT4gY2hhbm5lbHMuaW5jbHVkZXMoZ2FtZS5DaGFubmVsKSlcbiAgfVxuXG4gIGNvbGxlY3RCeUZpbHRlckRhdGUoY29sbGVjdGlvbjogUHMuU3BvcnREYXRhLk5GTC5HYW1lU2NvcmVbXSwgZGF0ZTogc3RyaW5nKTogUHMuU3BvcnREYXRhLk5GTC5HYW1lU2NvcmVbXSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uZmlsdGVyKGdhbWUgPT4gZ2FtZS5EYXkuc3Vic3RyaW5nKDAsIDEwKSA9PT0gZGF0ZS5zdWJzdHJpbmcoMCwgMTApKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5pdFN0YXRlKCk6IFByb21pc2U8TkZMSW5zdGFuY2VTdGF0ZT4ge1xuICAgIGNvbnN0IHNlYXNvbiA9IGF3YWl0IHRoaXMuZmV0Y2hTZWFzb25DdXJyZW50KClcbiAgICBjb25zdCBnYW1lcyA9IGF3YWl0IHRoaXMuZmV0Y2hTZWFzb25HYW1lcyhzZWFzb24pXG4gICAgY29uc3QgdGVhbXMgPSBhd2FpdCB0aGlzLmZldGNoU2Vhc29uVGVhbXMoc2Vhc29uKVxuICAgIGNvbnN0IHdlZWtzID0gZ2FtZXMucmVkdWNlKChzdW1tYXJ5LCBnYW1lKSA9PiB7XG4gICAgICBpZiAoc3VtbWFyeSA8IGdhbWUuV2Vlaykge1xuICAgICAgICByZXR1cm4gZ2FtZS5XZWVrXG4gICAgICB9XG4gICAgICByZXR1cm4gc3VtbWFyeVxuICAgIH0sIDApXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXNvbixcbiAgICAgIHRlYW1zLFxuICAgICAgZ2FtZXMsXG4gICAgICB3ZWVrcyxcbiAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgfVxuICB9XG5cbn0iLCJpbXBvcnQge0FscGluZUNvbXBvbmVudH0gZnJvbSBcImFscGluZWpzXCI7XG5cbnR5cGUgTkZMR2FtZUJ5RGF0ZUNvbmZpZyA9IHtcbiAgZGF0ZTogRGF0ZVxuICBuZmw6IFBzLlNwb3J0RGF0YS5ORkwuSW5zdGFuY2Vcbn1cblxudHlwZSBORkxHYW1lc0NvbXBvbmVudCA9IEFscGluZUNvbXBvbmVudCAmIHtcbiAgYXBpOiBQcy5TcG9ydERhdGEuTkZMLkluc3RhbmNlXG4gIG9wZW5lZDogYm9vbGVhblxuICBzZWxlY3RlZDogUHMuU3BvcnREYXRhLk5GTC5HYW1lU2NvcmUgfCB7fVxuICBob21lVGVhbTogUHMuU3BvcnREYXRhLk5GTC5UZWFtIHwge31cbiAgYXdheVRlYW06IFBzLlNwb3J0RGF0YS5ORkwuVGVhbSB8IHt9XG4gIHJlYWRvbmx5IGxvYWRpbmc6IGJvb2xlYW5cbiAgcmVhZG9ubHkgIGdhbWVzOiBQcy5TcG9ydERhdGEuTkZMLkdhbWVTY29yZVtdXG4gIHJlYWRvbmx5IGhhc05vQXZhaWxhYmxlR2FtZXM6IGJvb2xlYW5cbiAgcmVhZG9ubHkgaXNSZWFkeTogYm9vbGVhblxuICB0ZWFtKGlkOiBudW1iZXIpOiBQcy5TcG9ydERhdGEuTkZMLlRlYW0gfCB7fVxuICBvcGVuKGdhbWU6IFBzLlNwb3J0RGF0YS5ORkwuR2FtZVNjb3JlKTogdm9pZFxuICBjbG9zZSgpOiB2b2lkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb25maWc6IE5GTEdhbWVCeURhdGVDb25maWcpOiBORkxHYW1lc0NvbXBvbmVudCB7XG4gIHJldHVybiB7XG4gICAgYXBpOiBjb25maWcubmZsLFxuICAgIG9wZW5lZDogZmFsc2UsXG4gICAgc2VsZWN0ZWQ6IHt9LFxuICAgIGhvbWVUZWFtOiB7fSxcbiAgICBhd2F5VGVhbToge30sXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgIGlmICghdGhpcy5sb2FkaW5nICYmICFjb25maWcubmZsLnNlYXNvbikge1xuICAgICAgICB0aGlzLmFwaS5pbml0aWFsaXplKClcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldCBjdXJyZW50V2VlaygpIHtcbiAgICAgIHJldHVybiBjb25maWcubmZsPy5jdXJyZW50V2VlayA/PyAwXG4gICAgfSxcbiAgICBnZXQgd2Vla3MoKSB7XG4gICAgICByZXR1cm4gY29uZmlnLm5mbC53ZWVrc1xuICAgIH0sXG4gICAgZ2V0IGxvYWRpbmcoKSB7XG4gICAgICByZXR1cm4gY29uZmlnLm5mbC5sb2FkaW5nXG4gICAgfSxcbiAgICBnZXQgZ2FtZXMoKSB7XG4gICAgICByZXR1cm4gY29uZmlnLm5mbC5nYW1lc1xuICAgIH0sXG4gICAgZ2V0IGhhc05vQXZhaWxhYmxlR2FtZXMoKSB7XG4gICAgICByZXR1cm4gIXRoaXMubG9hZGluZyAmJiB0aGlzLmdhbWVzLmxlbmd0aCA8IDFcbiAgICB9LFxuICAgIGdldCBpc1JlYWR5KCkge1xuICAgICAgcmV0dXJuICF0aGlzLm9wZW5lZCAmJiAhdGhpcy5sb2FkaW5nICYmIHRoaXMuZ2FtZXMubGVuZ3RoID4gMFxuICAgIH0sXG5cbiAgICBnZXQgc3RhZ2UoKSB7XG4gICAgICBpZiAoIXRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9XG4gICAgICBjb25zdCBnYW1lOiBQcy5TcG9ydERhdGEuTkZMLkdhbWVTY29yZSA9IHRoaXMuc2VsZWN0ZWRcbiAgICAgIGlmIChnYW1lLlN0YXR1cyA9PT0gXCJTY2hlZHVsZWRcIikge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodW5kZWZpbmVkLCB7XG4gICAgICAgICAgaG91ckN5Y2xlOiAnaDEyJyxcbiAgICAgICAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICAgICAgICBtaW51dGU6IFwiMi1kaWdpdFwiXG4gICAgICAgIH0pLmZvcm1hdChuZXcgRGF0ZShnYW1lLkRhdGVUaW1lKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdhbWUuUXVhcnRlckRlc2NyaXB0aW9uID8/IGdhbWUuU3RhdHVzXG4gICAgfSxcblxuICAgIHRlYW0oaWQpIHtcbiAgICAgIHJldHVybiBjb25maWcubmZsLnRlYW1zLmZpbmQodGVhbSA9PiB0ZWFtLlRlYW1JRCA9PT0gaWQpID8/IHt9XG4gICAgfSxcbiAgICBvcGVuKGdhbWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBnYW1lXG4gICAgICB0aGlzLmhvbWVUZWFtID0gdGhpcy50ZWFtKGdhbWUuSG9tZVRlYW1JRClcbiAgICAgIHRoaXMuYXdheVRlYW0gPSB0aGlzLnRlYW0oZ2FtZS5Bd2F5VGVhbUlEKVxuICAgICAgdGhpcy5vcGVuZWQgPSB0cnVlXG4gICAgfSxcbiAgICBjbG9zZSgpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB7fVxuICAgICAgdGhpcy5ob21lVGVhbSA9IHt9XG4gICAgICB0aGlzLmF3YXlUZWFtID0ge31cbiAgICAgIHRoaXMub3BlbmVkID0gZmFsc2VcbiAgICB9LFxuICB9XG59IiwiaW1wb3J0IEFwaSBmcm9tICcuLi8uLi8uLi9jb3JlL1N1cHBvcnQvUHNBcGknXG5pbXBvcnQgTmZsSW5zdGFuY2UgZnJvbSBcIi4uL1NlcnZpY2VzL05mbEluc3RhbmNlLnRzXCI7XG5pbXBvcnQgTkZMR2FtZXNCeURhdGUgZnJvbSBcIi4uL0NvbXBvbmVudHMvTkZMR2FtZXNCeURhdGUudHNcIjtcbmltcG9ydCB7QWxwaW5lfSBmcm9tIFwiYWxwaW5lanNcIjtcblxuLyoqXG4gKiBORkwgQXBpIGNvbm5lY3Rvci5cbiAqIFRoaXMgc2VydmljZSBwcm92aWRlciBwcm92aWRlcyBhbiBhcGkgdG8gaW50ZXJhY3Qgd2l0aCBORkwgYXBpIGZyb20gU3BvcnREYXRhLlxuICpcbiAqIEBhdXRob3IgRGVsdmkgTWFydGUgPGRlbHZpQHBhZHNxdWFkLmNvbT5cbiAqIEBwYWNrYWdlIFNwb3J0RGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcG9ydERhdGFORkxQcm92aWRlciBpbXBsZW1lbnRzIFBzLlByb3ZpZGVyLkludGVyZmFjZSB7XG4gIC8qKlxuICAgKiBOZXR3b3JrIFNlcnZpY2VcbiAgICovXG4gIHByb3RlY3RlZCBhcGk/OiBQcy5TdXBwb3J0LkFwaS5JbnN0YW5jZTtcblxuICAvKipcbiAgICogQ2FjaGluZyBzZXJ2aWNlXG4gICAqL1xuICBwcm90ZWN0ZWQgY2FjaGU/OiBQcy5TdXBwb3J0LkNhY2hlLkluc3RhbmNlO1xuICAvKipcbiAgICogTkZMIFNlcnZpY2VcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIHNlcnZpY2U/OiBQcy5TcG9ydERhdGEuTkZMLkluc3RhbmNlO1xuXG4gIC8qKlxuICAgKiBBbHBpbmUgc2VydmljZS5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGFscGluZT86IEFscGluZVxuXG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnU3BvcnREYXRhTkZMJ1xuICB9XG5cbiAgYXN5bmMgYm9vdCh7XG4gICAgICAgICAgICAgICBkZWJ1ZyxcbiAgICAgICAgICAgICAgIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICB9OiBQcy5Qcm92aWRlci5Db250ZXh0PFBzLkluc3RhbmNlLlNwb3J0RGF0YU5GTENvbmZpZz4pIHtcbiAgICBpZiAoIXRoaXMuY2FjaGUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignW1BhZFNxdWFkXTpORkwgLSBTZXJ2aWNlIFtjYWNoZV0gaXMgcmVxdWlyZWQuJylcbiAgICB9XG4gICAgaWYgKCF0aGlzLmFwaSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdbUGFkU3F1YWRdOk5GTCAtIFNlcnZpY2UgW2FwaV0gaXMgcmVxdWlyZWQuJylcbiAgICB9XG4gICAgaWYgKCF0aGlzLnNlcnZpY2UpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignW1BhZFNxdWFkXTpORkwgLSBTZXJ2aWNlIFtORkxdIG11c3QgYmUgaW5zdGFudGlhdGVkLicpXG4gICAgfVxuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKGBbUGFkU3F1YWRdOiR7dGhpcy5rZXkoKX0gU3BvcnQgZGF0YSBCT09URUQuYClcbiAgICB9XG4gICAgaWYgKHBhcmFtZXRlcnM/LnN0YXJ0T25Cb290KSB7XG4gICAgICBhd2FpdCB0aGlzLnNlcnZpY2UuaW5pdGlhbGl6ZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2VydmljZVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlZ2lzdGVyKGN0eDogUHMuUHJvdmlkZXIuQ29udGV4dDxQcy5JbnN0YW5jZS5TcG9ydERhdGFORkxDb25maWc+KSB7XG4gICAgaWYgKGN0eC5kZWJ1Zykge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgW1BhZFNxdWFkXToke3RoaXMua2V5KCl9IFNwb3J0IGRhdGEgUkVHSVNURVJFRC5gKVxuICAgIH1cblxuICAgIHRoaXMuYXBpID0gbmV3IEFwaSh7XG4gICAgICBhcGlUb2tlbjogYCR7Y3R4LnBhcmFtZXRlcnM/LnRva2VufWAsXG4gICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuc3BvcnRzZGF0YS5pby92My9uZmwvJyxcbiAgICAgIGFwaUtleU5hbWU6ICdrZXknLFxuICAgICAgYXV0aG9yaXphdGlvbjogJ2tleScsXG4gICAgfSlcblxuICAgIHRoaXMuY2FjaGUgPSBjdHguZW5naW5lLmdldDxQcy5TdXBwb3J0LkNhY2hlLkluc3RhbmNlPignY2FjaGUnKVxuXG4gICAgdGhpcy5zZXJ2aWNlID0gbmV3IE5mbEluc3RhbmNlKHtcbiAgICAgIGtleTogY3R4LnBhcmFtZXRlcnM/LmRhdGUgPz8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgYXBpOiB0aGlzLmFwaSxcbiAgICAgIGRlYnVnOiBjdHguZGVidWcsXG4gICAgICBjYWNoZTogdGhpcy5jYWNoZSBhcyBQcy5TdXBwb3J0LkNhY2hlLkluc3RhbmNlLFxuICAgICAgZmlsdGVyczoge1xuICAgICAgICBkYXRlOiBjdHgucGFyYW1ldGVycz8uZGF0ZSxcbiAgICAgICAgY2hhbm5lbHM6IGN0eC5wYXJhbWV0ZXJzPy5jaGFubmVscyxcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYWxwaW5lOmluaXQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmFscGluZSA9IGN0eC5lbmdpbmUuZ2V0PEFscGluZT4oJ2FscGluZScpXG4gICAgICB0aGlzLnJlZ2lzdGVyQ29tcG9uZW50cyhjdHgpXG4gICAgfSlcbiAgfVxuXG5cbiAgcHJvdGVjdGVkIHJlZ2lzdGVyQ29tcG9uZW50cyh7cGFyYW1ldGVyc306IFBzLlByb3ZpZGVyLkNvbnRleHQpIHtcblxuICAgIHRoaXMuYWxwaW5lPy5kYXRhKCdORkxHYW1lc0J5RGF0ZScsIChpbml0aWFsU3RhdGVBcmdzKSA9PlxuICAgICAgICBORkxHYW1lc0J5RGF0ZSh7XG4gICAgICAgICAgbmZsOiB0aGlzLnNlcnZpY2UgYXMgUHMuU3BvcnREYXRhLk5GTC5JbnN0YW5jZSxcbiAgICAgICAgICBkYXRlOiBpbml0aWFsU3RhdGVBcmdzID8/IHBhcmFtZXRlcnM/LmRhdGUsXG4gICAgICAgIH0pXG4gICAgKVxuICB9XG59Il0sIm5hbWVzIjpbIlBzQXBpIiwiY29uZmlnIiwiX19wdWJsaWNGaWVsZCIsInBhdGgiLCJwYXJhbXMiLCJyZXNwb25zZSIsInF1ZXJ5IiwicXVlcnlTdHJpbmciLCJOZmxJbnN0YW5jZSIsImFwaSIsImNhY2hlIiwia2V5IiwiZGVidWciLCJmaWx0ZXJzIiwiQWxwaW5lIiwiZyIsIl9iIiwiX2EiLCJjYW5jZWwiLCJzdGF0ZSIsImRhdGEiLCJmYWlsZWQiLCJzZWFzb24iLCJtZXNzYWdlIiwiY29sbGVjdGlvbiIsImNoYW5uZWxzIiwiZ2FtZSIsImRhdGUiLCJnYW1lcyIsInRlYW1zIiwid2Vla3MiLCJzdW1tYXJ5IiwiTkZMR2FtZXNCeURhdGUiLCJpZCIsInRlYW0iLCJTcG9ydERhdGFORkxQcm92aWRlciIsInBhcmFtZXRlcnMiLCJjdHgiLCJBcGkiLCJfYyIsIl9kIiwiaW5pdGlhbFN0YXRlQXJncyJdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLE1BQXFCQSxFQUFNO0FBQUEsRUFHekIsWUFBWUMs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
