var l = Object.defineProperty;
var o = (i, e, t) => e in i ? l(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var n = (i, e, t) => (o(i, typeof e != "symbol" ? e + "" : e, t), t);
import c from "../../libs/lib-alpine.js";
class u {
  constructor(e) {
    n(this, "$config");
    this.$config = e;
  }
  async get(e, t) {
    const s = await fetch(this.url(e, t));
    return s.ok ? {
      failed: !1,
      message: s.statusText,
      data: await s.json() || await s.text()
    } : {
      failed: !0,
      message: s.statusText,
      data: {}
    };
  }
  url(e, t) {
    const s = new URLSearchParams(t);
    this.$config.authorization === "key" && s.set(this.$config.apiKeyName, this.$config.apiToken);
    const a = s.toString();
    return new URL(`${e}${a ? "?" + a : ""}`, this.$config.baseUrl);
  }
}
class d {
  constructor({ api: e, cache: t, key: s, debug: a, filters: r }) {
    n(this, "$api");
    n(this, "$cache");
    n(this, "$key");
    n(this, "$debugging");
    n(this, "$filters");
    n(this, "$state", c.reactive({
      season: "",
      loading: !1,
      weeks: 0,
      games: [],
      teams: []
    }));
    this.$api = e, this.$cache = t, this.$key = s, this.$debugging = a, this.$filters = r ?? {};
  }
  get weeks() {
    return this.$state.weeks;
  }
  get games() {
    const e = this.collectByFilters(this.$state.games);
    if (e.length < 1 && this.$state.games.length > 0) {
      const t = this.collectByFilters(this.$state.games, ["date"]);
      return Array(2).fill(void 0).map((s, a) => t[a] ? t[a] : s).filter((s) => s);
    }
    return e;
  }
  get channels() {
    return [...new Set(this.games.map((e) => e.Channel))];
  }
  get season() {
    return this.$state.season;
  }
  get teams() {
    return this.$state.teams;
  }
  get loading() {
    return this.$state.loading;
  }
  get currentWeek() {
    var e, t;
    return ((t = (e = this.games) == null ? void 0 : e.at(0)) == null ? void 0 : t.Week) ?? 0;
  }
  /**
   * Initialize the instance state.
   */
  async initialize() {
    return document.dispatchEvent(new CustomEvent("nfl:loading", {
      bubbles: !0,
      cancelable: !0,
      detail: { loading: !0 }
    })), this.$state.loading = !0, this.$debugging ? this.$state = await this.initState() : this.$state = await this.$cache.get(
      `NFLInstance.sync.${this.$key}`,
      async ({ cancel: e }) => {
        const t = await this.initState();
        return t.teams.length < 1 || t.games.length < 1 || !t.season ? e(t) : t;
      }
    ), setTimeout(() => {
      this.$state.loading = !1, document.dispatchEvent(new CustomEvent("nfl:loading", {
        bubbles: !0,
        cancelable: !0,
        detail: { loading: !1 }
      }));
    }, (window == null ? void 0 : window.NFL_LOADING_TIME) ?? 1e3), this;
  }
  async fetchSeasonCurrent() {
    const { data: e, failed: t } = await this.$api.get(
      "scores/json/CurrentSeason"
    );
    return t ? (/* @__PURE__ */ new Date()).getFullYear().toString() : e;
  }
  async fetchSeasonGames(e) {
    const { data: t, failed: s, message: a } = await this.$api.get(`scores/json/Scores/${e}`);
    if (s)
      throw TypeError(`NFLInstance.fetchSeasonGames: ${a}`);
    return t;
  }
  async fetchSeasonTeams(e) {
    const { data: t, failed: s, message: a } = await this.$api.get(`scores/json/Teams/${e}`);
    if (s)
      throw TypeError(`NFLInstance.fetchSeasonTeams: ${a}`);
    return t;
  }
  collectByFilters(e, t = []) {
    var s, a;
    return (s = this.$filters) != null && s.date && !t.includes("date") && (e = this.collectByFilterDate(e, this.$filters.date)), Array.isArray((a = this.$filters) == null ? void 0 : a.channels) && !t.includes("channels") && (e = this.collectByFilterChannels(
      e,
      this.$filters.channels
    )), e;
  }
  collectByFilterChannels(e, t) {
    return e.filter((s) => t.includes(s.Channel));
  }
  collectByFilterDate(e, t) {
    return e.filter(
      (s) => s.Day.substring(0, 10) === t.substring(0, 10)
    );
  }
  async initState() {
    const e = await this.fetchSeasonCurrent(), t = await this.fetchSeasonGames(e), s = await this.fetchSeasonTeams(e), a = t.reduce((r, h) => r < h.Week ? h.Week : r, 0);
    return {
      season: e,
      teams: s,
      games: t,
      weeks: a,
      loading: !1
    };
  }
}
function g(i) {
  return {
    api: i.nfl,
    opened: !1,
    selected: {},
    homeTeam: {},
    awayTeam: {},
    async init() {
      !this.loading && !i.nfl.season && this.api.initialize();
    },
    get currentWeek() {
      var e;
      return ((e = i.nfl) == null ? void 0 : e.currentWeek) ?? 0;
    },
    get weeks() {
      return i.nfl.weeks;
    },
    get loading() {
      return i.nfl.loading;
    },
    get games() {
      return i.nfl.games;
    },
    get hasNoAvailableGames() {
      return !this.loading && this.games.length < 1;
    },
    get isReady() {
      return !this.opened && !this.loading && this.games.length > 0;
    },
    get seasonTitle() {
      var t;
      if (!this.selected)
        return "";
      const e = (t = this.selected.Season) == null ? void 0 : t.toString();
      return e != null && e.endsWith("PRE") ? "Pre-Season" : e != null && e.endsWith("POST") ? "Post-Season" : "Regular Season";
    },
    get stage() {
      if (!this.selected)
        return "";
      const e = this.selected;
      return e.Status === "Scheduled" ? new Intl.DateTimeFormat(void 0, {
        hourCycle: "h12",
        hour: "2-digit",
        minute: "2-digit"
      }).format(new Date(e.DateTime)) : e.QuarterDescription ?? e.Status;
    },
    team(e) {
      return i.nfl.teams.find((t) => t.TeamID === e) ?? {};
    },
    open(e) {
      return this.selected = e, this.homeTeam = this.team(e.HomeTeamID), this.awayTeam = this.team(e.AwayTeamID), this.opened = !0, e;
    },
    close() {
      this.selected = {}, this.homeTeam = {}, this.awayTeam = {}, this.opened = !1;
    }
  };
}
class y {
  constructor() {
    /**
     * Network Service
     */
    n(this, "api");
    /**
     * Caching service
     */
    n(this, "cache");
    /**
     * NFL Service
     * @protected
     */
    n(this, "service");
    /**
     * Alpine service.
     * @protected
     */
    n(this, "alpine");
  }
  key() {
    return "SportDataNFL";
  }
  async boot({
    debug: e,
    parameters: t
  }) {
    if (!this.cache)
      throw TypeError("[PadSquad]:NFL - Service [cache] is required.");
    if (!this.api)
      throw TypeError("[PadSquad]:NFL - Service [api] is required.");
    if (!this.service)
      throw TypeError("[PadSquad]:NFL - Service [NFL] must be instantiated.");
    return e && console.debug(`[PadSquad]:${this.key()} Sport data BOOTED.`), t != null && t.startOnBoot && await this.service.initialize(), this.service;
  }
  async register(e) {
    var t, s, a, r;
    e.debug && console.debug(`[PadSquad]:${this.key()} Sport data REGISTERED.`), this.api = new u({
      apiToken: `${(t = e.parameters) == null ? void 0 : t.token}`,
      baseUrl: "https://api.sportsdata.io/v3/nfl/",
      apiKeyName: "key",
      authorization: "key"
    }), this.cache = e.engine.get("cache"), this.service = new d({
      key: ((s = e.parameters) == null ? void 0 : s.date) ?? (/* @__PURE__ */ new Date()).toISOString(),
      api: this.api,
      debug: e.debug,
      cache: this.cache,
      filters: {
        date: (a = e.parameters) == null ? void 0 : a.date,
        channels: (r = e.parameters) == null ? void 0 : r.channels
      }
    }), document.addEventListener("alpine:init", () => {
      this.alpine = e.engine.get("alpine"), this.registerComponents(e);
    });
  }
  registerComponents({ parameters: e }) {
    var t;
    (t = this.alpine) == null || t.data(
      "NFLGamesByDate",
      (s) => g({
        nfl: this.service,
        date: s ?? (e == null ? void 0 : e.date)
      })
    );
  }
}
export {
  y as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
