var u = Object.defineProperty;
var h = (i, s, e) => s in i ? u(i, s, { enumerable: !0, configurable: !0, writable: !0, value: e }) : i[s] = e;
var n = (i, s, e) => (h(i, typeof s != "symbol" ? s + "" : s, e), e);
class a {
  constructor(s) {
    n(this, "$tagParams");
    n(this, "$providers", []);
    n(this, "$loaded", {});
    this.$tagParams = s;
  }
  preload(s, e, t) {
    return this.$providers.push({ pathClass: s, alias: e, parameters: t }), this;
  }
  async load({ name: s, key: e, parameters: t, debug: r }) {
    try {
      const { default: o } = await import(`${s}.js`), l = new o(), p = {
        engine: this,
        debug: r,
        parameters: t
      };
      await l.register(p), this.$loaded[e] = await l.boot(p);
    } catch (o) {
      throw TypeError(`[PadSquad:Core] Unable to load ${s}, got a message:"${o}"`);
    }
  }
  isMounted(s) {
    return typeof this.$loaded[s] < "u";
  }
  get(s) {
    return this.isMounted(s) ? this.$loaded[s] : null;
  }
  async start(s) {
    for (const { alias: e, parameters: t, pathClass: r } of this.$providers)
      await this.load({
        name: r,
        key: e,
        parameters: t,
        debug: (s == null ? void 0 : s.debug) ?? (t == null ? void 0 : t.debug) ?? !1
      });
    return this;
  }
}
class c {
  constructor(s = []) {
    n(this, "$ps", new a());
    n(this, "$preload", []);
    this.$preload = s;
  }
  useCache(s = { debug: !1 }, e) {
    return this.$preload.push({
      name: "cache",
      path: e ?? "@tag/support/cache",
      config: s
    }), this;
  }
  useAnimate(s = { debug: !1 }, e) {
    return this.$preload.push({
      name: "animate",
      path: e ?? "@tag/support/animate",
      config: s
    }), this;
  }
  useAlpine(s, e) {
    return this.$preload.push({
      name: "alpine",
      path: e ?? "@tag/support/alpine",
      config: s
    }), this;
  }
  useApi(s) {
    return this.$preload.push({
      name: "api",
      path: "@tag/support/api",
      config: s
    }), this;
  }
  use(s) {
    return this.$preload.push(s), this;
  }
  on(s, e) {
    return !s || !e ? this : (document.addEventListener(
      s,
      (t) => e(t == null ? void 0 : t.detail)
    ), this);
  }
  track(s) {
    return this.on("hotspot:click", ({ data: e }) => {
      var t, r, o, l;
      s != null && s.debug && console.log("[PadSquad]:hotspot:click", e), (t = window.airtory) != null && t.track && ((r = window.airtory) == null || r.track(e.label)), window.__simpli && ((l = (o = window.__simpli) == null ? void 0 : o.analytics()) == null || l.trackClickEvent(
        (e == null ? void 0 : e.label) ?? "",
        (e == null ? void 0 : e.asset) ?? "",
        (e == null ? void 0 : e.url) ?? ""
      ));
    }).on("hotspot:interaction", ({ data: e }) => {
      window.airtory && window.airtory.track((e == null ? void 0 : e.label) ?? ""), window.__simpli && window.__simpli.analytics().trackCustomEvent(
        (e == null ? void 0 : e.label) ?? "",
        (e == null ? void 0 : e.asset) ?? "",
        (e == null ? void 0 : e.eventName) ?? ""
      );
    });
  }
  async start() {
    var s, e;
    for (const t of this.$preload)
      (s = this.$ps) == null || s.preload(t.path, t.name, t.config);
    return await this.$ps.start(), (e = this.$ps.get("alpine")) == null || e.start(), this.$ps;
  }
}
const d = `[x-cloak]{display:none!important}
`;
window.SimpliTag = new c();
window.addEventListener("loadstart", () => {
  const i = document.createElement("style");
  i.innerText = d, document.head.append(i);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxpLXRhZy5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvcmUvUGFkU3F1YWQudHMiLCIuLi9zcmMvY29yZS9TaW1wbGlUYWcudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBQYWRTcXVhZCBpbXBsZW1lbnRzIFBzLkluc3RhbmNlLkFwcCB7XG4gIHJlYWRvbmx5ICR0YWdQYXJhbXM6IFBzLlRhZy5QYXJhbXMgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJHByb3ZpZGVyczoge1xuICAgIGFsaWFzOiBzdHJpbmcsXG4gICAgcGF0aENsYXNzOiBzdHJpbmcsXG4gICAgcGFyYW1ldGVyczogYW55XG4gIH1bXSA9IFtdXG4gIHByaXZhdGUgJGxvYWRlZDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9XG5cbiAgY29uc3RydWN0b3IodGFnUGFyYW1zPzogUHMuVGFnLlBhcmFtcykge1xuICAgIHRoaXMuJHRhZ1BhcmFtcyA9IHRhZ1BhcmFtc1xuICB9XG5cbiAgcHJlbG9hZChwYXRoQ2xhc3M6IHN0cmluZywgYWxpYXM6IHN0cmluZywgcGFyYW1ldGVycz86IHtcbiAgICBbcDogc3RyaW5nXTogYW55XG4gIH0pIHtcbiAgICB0aGlzLiRwcm92aWRlcnMucHVzaCh7cGF0aENsYXNzLCBhbGlhcywgcGFyYW1ldGVyc30pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgYXN5bmMgbG9hZCh7bmFtZSwga2V5LCBwYXJhbWV0ZXJzLCBkZWJ1Z306IHtcbiAgICBuYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nLCBwYXJhbWV0ZXJzPzoge1xuICAgICAgW2tleTogc3RyaW5nXTogYW55XG4gICAgfSwgZGVidWc6IGJvb2xlYW5cbiAgfSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7ZGVmYXVsdDogbW9kdWxlfSA9IGF3YWl0IGltcG9ydChgJHtuYW1lfS5qc2ApXG4gICAgICBjb25zdCBwcm92aWRlcjogUHMuUHJvdmlkZXIuSW50ZXJmYWNlID0gbmV3IG1vZHVsZSgpXG4gICAgICBjb25zdCBjb250ZXh0OiBQcy5Qcm92aWRlci5Db250ZXh0ID0ge1xuICAgICAgICBlbmdpbmU6IHRoaXMsXG4gICAgICAgIGRlYnVnLFxuICAgICAgICBwYXJhbWV0ZXJzXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBwcm92aWRlci5yZWdpc3Rlcihjb250ZXh0KVxuXG4gICAgICB0aGlzLiRsb2FkZWRba2V5XSA9IGF3YWl0IHByb3ZpZGVyLmJvb3QoY29udGV4dClcblxuICAgIH0gY2F0Y2ggKGU6IEVycm9yIHwgdW5rbm93bikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKGBbUGFkU3F1YWQ6Q29yZV0gVW5hYmxlIHRvIGxvYWQgJHtuYW1lfSwgZ290IGEgbWVzc2FnZTpcIiR7ZX1cImApXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzTW91bnRlZChrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy4kbG9hZGVkW2tleV0gIT09ICd1bmRlZmluZWQnXG4gIH1cblxuICBwdWJsaWMgZ2V0PFQgPSBhbnk+KGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZChrZXkpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kbG9hZGVkW2tleV0gYXMgVFxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0YXJ0KGN0eDogUGFydGlhbDx7IGRlYnVnOiBib29sZWFuIH0+KSB7XG4gICAgZm9yIChjb25zdCB7YWxpYXMsIHBhcmFtZXRlcnMsIHBhdGhDbGFzc30gb2YgdGhpcy4kcHJvdmlkZXJzKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWQoe1xuICAgICAgICBuYW1lOiBwYXRoQ2xhc3MsXG4gICAgICAgIGtleTogYWxpYXMsXG4gICAgICAgIHBhcmFtZXRlcnMsXG4gICAgICAgIGRlYnVnOiBjdHg/LmRlYnVnID8/IHBhcmFtZXRlcnM/LmRlYnVnID8/IGZhbHNlXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG4iLCJpbXBvcnQgUGFkU3F1YWQgZnJvbSBcIi4vUGFkU3F1YWQudHNcIjtcbmltcG9ydCB7IEFscGluZSB9IGZyb20gXCJhbHBpbmVqc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGlUYWcge1xuICBwcml2YXRlICRwczogUHMuSW5zdGFuY2UuQXBwID0gbmV3IFBhZFNxdWFkKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgJHByZWxvYWQ6IFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJlbG9hZDogUHMuSW5zdGFuY2UuTW9kdWxlQ29uZmlnW10gPSBbXSkge1xuICAgIHRoaXMuJHByZWxvYWQgPSBwcmVsb2FkO1xuICB9XG5cbiAgcHVibGljIHVzZUNhY2hlKFxuICAgIGNvbmZpZzogeyBkZWJ1ZzogYm9vbGVhbiB9ID0geyBkZWJ1ZzogZmFsc2UgfSxcbiAgICBwYXRoPzogc3RyaW5nXG4gICk6IFNpbXBsaVRhZyB7XG4gICAgdGhpcy4kcHJlbG9hZC5wdXNoKDxQcy5JbnN0YW5jZS5Nb2R1bGVDb25maWdDYWNoZT57XG4gICAgICBuYW1lOiBcImNhY2hlXCIsXG4gICAgICBwYXRoOiBwYXRoID8/IFwiQHRhZy9zdXBwb3J0L2NhY2hlXCIsXG4gICAgICBjb25maWcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgdXNlQW5pbWF0ZShcbiAgICBjb25maWc6IHsgZGVidWc6IGJvb2xlYW4gfSA9IHsgZGVidWc6IGZhbHNlIH0sXG4gICAgcGF0aD86IHN0cmluZ1xuICApOiBTaW1wbGlUYWcge1xuICAgIHRoaXMuJHByZWxvYWQucHVzaCg8UHMuSW5zdGFuY2UuTW9kdWxlQ29uZmlnQW5pbWF0ZT57XG4gICAgICBuYW1lOiBcImFuaW1hdGVcIixcbiAgICAgIHBhdGg6IHBhdGggPz8gXCJAdGFnL3N1cHBvcnQvYW5pbWF0ZVwiLFxuICAgICAgY29uZmlnLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHVzZUFscGluZShcbiAgICBjb25maWc/OiBQaWNrPFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZ0FscGluZSwgXCJjb25maWdcIj4sXG4gICAgcGF0aD86IHN0cmluZ1xuICApOiBTaW1wbGlUYWcge1xuICAgIHRoaXMuJHByZWxvYWQucHVzaCg8UHMuSW5zdGFuY2UuTW9kdWxlQ29uZmlnQWxwaW5lPntcbiAgICAgIG5hbWU6IFwiYWxwaW5lXCIsXG4gICAgICBwYXRoOiBwYXRoID8/IFwiQHRhZy9zdXBwb3J0L2FscGluZVwiLFxuICAgICAgY29uZmlnLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHVzZUFwaShjb25maWc6IFBzLlN1cHBvcnQuQXBpLkNvbmZpZyk6IFNpbXBsaVRhZyB7XG4gICAgdGhpcy4kcHJlbG9hZC5wdXNoKDxQcy5JbnN0YW5jZS5Nb2R1bGVDb25maWdBcGk+e1xuICAgICAgbmFtZTogXCJhcGlcIixcbiAgICAgIHBhdGg6IFwiQHRhZy9zdXBwb3J0L2FwaVwiLFxuICAgICAgY29uZmlnLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIHVzZShjb25maWc6IFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZyk6IFNpbXBsaVRhZyB7XG4gICAgdGhpcy4kcHJlbG9hZC5wdXNoKGNvbmZpZyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgb24oXG4gICAgZXZlbnQ/OiBcImhvdHNwb3Q6Y2xpY2tcIiB8IFwiaG90c3BvdDppbnRlcmFjdGlvblwiLFxuICAgIGhhbmRsZXI/OiAocGF5bG9hZDogYW55KSA9PiB2b2lkXG4gICk6IFNpbXBsaVRhZyB7XG4gICAgaWYgKCFldmVudCB8fCAhaGFuZGxlcikge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgKGV2KSA9PlxuICAgICAgaGFuZGxlcigoZXYgYXMgQ3VzdG9tRXZlbnQpPy5kZXRhaWwpXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyB0cmFjayhvcHRpb25zPzogeyBkZWJ1Zz86IGJvb2xlYW4gfSkge1xuICAgIHJldHVybiB0aGlzLm9uKFwiaG90c3BvdDpjbGlja1wiLCAoeyBkYXRhIH0pID0+IHtcbiAgICAgIGlmIChvcHRpb25zPy5kZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltQYWRTcXVhZF06aG90c3BvdDpjbGlja1wiLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGlmICh3aW5kb3cuYWlydG9yeT8udHJhY2spIHtcbiAgICAgICAgd2luZG93LmFpcnRvcnk/LnRyYWNrKGRhdGEubGFiZWwpO1xuICAgICAgfVxuICAgICAgaWYgKHdpbmRvdy5fX3NpbXBsaSkge1xuICAgICAgICB3aW5kb3cuX19zaW1wbGlcbiAgICAgICAgICA/LmFuYWx5dGljcygpXG4gICAgICAgICAgPy50cmFja0NsaWNrRXZlbnQoXG4gICAgICAgICAgICBkYXRhPy5sYWJlbCA/PyBcIlwiLFxuICAgICAgICAgICAgZGF0YT8uYXNzZXQgPz8gXCJcIixcbiAgICAgICAgICAgIGRhdGE/LnVybCA/PyBcIlwiXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KS5vbihcImhvdHNwb3Q6aW50ZXJhY3Rpb25cIiwgKHsgZGF0YSB9KSA9PiB7XG4gICAgICBpZiAod2luZG93LmFpcnRvcnkpIHtcbiAgICAgICAgd2luZG93LmFpcnRvcnkudHJhY2soZGF0YT8ubGFiZWwgPz8gXCJcIik7XG4gICAgICB9XG4gICAgICBpZiAod2luZG93Ll9fc2ltcGxpKSB7XG4gICAgICAgIHdpbmRvdy5fX3NpbXBsaVxuICAgICAgICAgIC5hbmFseXRpY3MoKVxuICAgICAgICAgIC50cmFja0N1c3RvbUV2ZW50KFxuICAgICAgICAgICAgZGF0YT8ubGFiZWwgPz8gXCJcIixcbiAgICAgICAgICAgIGRhdGE/LmFzc2V0ID8/IFwiXCIsXG4gICAgICAgICAgICBkYXRhPy5ldmVudE5hbWUgPz8gXCJcIlxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RhcnQoKSB7XG4gICAgZm9yIChjb25zdCBtb2R1bGUgb2YgdGhpcy4kcHJlbG9hZCkge1xuICAgICAgdGhpcy4kcHM/LnByZWxvYWQobW9kdWxlLnBhdGgsIG1vZHVsZS5uYW1lLCBtb2R1bGUuY29uZmlnKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLiRwcy5zdGFydCgpO1xuXG4gICAgdGhpcy4kcHMuZ2V0PEFscGluZT4oXCJhbHBpbmVcIik/LnN0YXJ0KCk7XG5cbiAgICByZXR1cm4gdGhpcy4kcHM7XG4gIH1cbn1cbiIsImltcG9ydCBTaW1wbGlUYWcgZnJvbSBcIi4vY29yZS9TaW1wbGlUYWcudHNcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZS5jc3MnXG5cbndpbmRvdy5TaW1wbGlUYWcgPSBuZXcgU2ltcGxpVGFnKClcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRzdGFydCcsICgpID0+IHtcbiAgY29uc3QgdGhlbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG5cbiAgdGhlbWUuaW5uZXJUZXh0ID0gc3R5bGVzXG5cbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmQodGhlbWUpXG59KVxuIl0sIm5hbWVzIjpbIlBhZFNxdWFkIiwidGFnUGFyYW1zIiwiX19wdWJsaWNGaWVsZCIsInBhdGhDbGFzcyIsImFsaWFzIiwicGFyYW1ldGVycyIsIm5hbWUiLCJrZXkiLCJkZWJ1ZyIsIm1vZHVsZSIsInByb3ZpZGVyIiwiY29udGV4dCIsImUiLCJjdHgiLCJTaW1wbGlUYWciLCJwcmVsb2FkIiwiY29uZmlnIiwicGF0aCIsImV2ZW50IiwiaGFuZGxlciIsImV2Iiwib3B0aW9ucyIsImRhdGEiLCJfYSIsIl9iIiwi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
