var p = Object.defineProperty;
var h = (s, t, e) => t in s ? p(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var r = (s, t, e) => (h(s, typeof t != "symbol" ? t + "" : t, e), e);
class l {
  constructor(t) {
    r(this, "$tagParams");
    r(this, "$providers", []);
    r(this, "$loaded", {});
    this.$tagParams = t;
  }
  preload(t, e, a) {
    return this.$providers.push({ pathClass: t, alias: e, parameters: a }), this;
  }
  async load({ name: t, key: e, parameters: a, debug: o }) {
    try {
      const { default: i } = await import(`${t}.js`), n = new i(), d = {
        engine: this,
        debug: o,
        parameters: a
      };
      await n.register(d), this.$loaded[e] = await n.boot(d);
    } catch (i) {
      throw TypeError(`[PadSquad:Core] Unable to load ${t}, got a message:"${i}"`);
    }
  }
  isMounted(t) {
    return typeof this.$loaded[t] < "u";
  }
  get(t) {
    return this.isMounted(t) ? this.$loaded[t] : null;
  }
  async start(t) {
    for (const { alias: e, parameters: a, pathClass: o } of this.$providers)
      await this.load({
        name: o,
        key: e,
        parameters: a,
        debug: (t == null ? void 0 : t.debug) ?? (a == null ? void 0 : a.debug) ?? !1
      });
    return this;
  }
}
class u {
  constructor(t = []) {
    r(this, "$ps", new l());
    r(this, "$preload", []);
    this.$preload = t;
  }
  useCache(t = { debug: !1 }) {
    return this.$preload.push({
      name: "cache",
      path: "@tag/support/cache",
      config: t
    }), this;
  }
  useAlpine(t) {
    return this.$preload.push({
      name: "alpine",
      path: "@tag/support/alpine",
      config: t
    }), this;
  }
  useApi(t) {
    return this.$preload.push({
      name: "api",
      path: "@tag/support/api",
      config: t
    }), this;
  }
  use(t) {
    return this.$preload.push(t), this;
  }
  async start() {
    var t, e;
    for (const a of this.$preload)
      (t = this.$ps) == null || t.preload(a.path, a.name, a.config);
    return await this.$ps.start(), (e = this.$ps.get("alpine")) == null || e.start(), this.$ps;
  }
}
const c = `[x-cloak]{display:none!important}
`;
window.SimpliTag = new u();
window.addEventListener("loadstart", () => {
  const s = document.createElement("style");
  s.innerText = c, document.head.append(s);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxpLXRhZy5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL2NvcmUvUGFkU3F1YWQudHMiLCIuLi9zcmMvY29yZS9TaW1wbGlUYWcudHMiLCIuLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBQYWRTcXVhZCBpbXBsZW1lbnRzIFBzLkluc3RhbmNlLkFwcCB7XG4gIHJlYWRvbmx5ICR0YWdQYXJhbXM6IFBzLlRhZy5QYXJhbXMgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgJHByb3ZpZGVyczoge1xuICAgIGFsaWFzOiBzdHJpbmcsXG4gICAgcGF0aENsYXNzOiBzdHJpbmcsXG4gICAgcGFyYW1ldGVyczogYW55XG4gIH1bXSA9IFtdXG4gIHByaXZhdGUgJGxvYWRlZDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9XG5cbiAgY29uc3RydWN0b3IodGFnUGFyYW1zPzogUHMuVGFnLlBhcmFtcykge1xuICAgIHRoaXMuJHRhZ1BhcmFtcyA9IHRhZ1BhcmFtc1xuICB9XG5cbiAgcHJlbG9hZChwYXRoQ2xhc3M6IHN0cmluZywgYWxpYXM6IHN0cmluZywgcGFyYW1ldGVycz86IHtcbiAgICBbcDogc3RyaW5nXTogYW55XG4gIH0pIHtcbiAgICB0aGlzLiRwcm92aWRlcnMucHVzaCh7cGF0aENsYXNzLCBhbGlhcywgcGFyYW1ldGVyc30pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgYXN5bmMgbG9hZCh7bmFtZSwga2V5LCBwYXJhbWV0ZXJzLCBkZWJ1Z306IHtcbiAgICBuYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nLCBwYXJhbWV0ZXJzPzoge1xuICAgICAgW2tleTogc3RyaW5nXTogYW55XG4gICAgfSwgZGVidWc6IGJvb2xlYW5cbiAgfSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7ZGVmYXVsdDogbW9kdWxlfSA9IGF3YWl0IGltcG9ydChgJHtuYW1lfS5qc2ApXG4gICAgICBjb25zdCBwcm92aWRlcjogUHMuUHJvdmlkZXIuSW50ZXJmYWNlID0gbmV3IG1vZHVsZSgpXG4gICAgICBjb25zdCBjb250ZXh0OiBQcy5Qcm92aWRlci5Db250ZXh0ID0ge1xuICAgICAgICBlbmdpbmU6IHRoaXMsXG4gICAgICAgIGRlYnVnLFxuICAgICAgICBwYXJhbWV0ZXJzXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBwcm92aWRlci5yZWdpc3Rlcihjb250ZXh0KVxuXG4gICAgICB0aGlzLiRsb2FkZWRba2V5XSA9IGF3YWl0IHByb3ZpZGVyLmJvb3QoY29udGV4dClcblxuICAgIH0gY2F0Y2ggKGU6IEVycm9yIHwgdW5rbm93bikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKGBbUGFkU3F1YWQ6Q29yZV0gVW5hYmxlIHRvIGxvYWQgJHtuYW1lfSwgZ290IGEgbWVzc2FnZTpcIiR7ZX1cImApXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGlzTW91bnRlZChrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy4kbG9hZGVkW2tleV0gIT09ICd1bmRlZmluZWQnXG4gIH1cblxuICBwdWJsaWMgZ2V0PFQgPSBhbnk+KGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZChrZXkpKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kbG9hZGVkW2tleV0gYXMgVFxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0YXJ0KGN0eDogUGFydGlhbDx7IGRlYnVnOiBib29sZWFuIH0+KSB7XG4gICAgZm9yIChjb25zdCB7YWxpYXMsIHBhcmFtZXRlcnMsIHBhdGhDbGFzc30gb2YgdGhpcy4kcHJvdmlkZXJzKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWQoe1xuICAgICAgICBuYW1lOiBwYXRoQ2xhc3MsXG4gICAgICAgIGtleTogYWxpYXMsXG4gICAgICAgIHBhcmFtZXRlcnMsXG4gICAgICAgIGRlYnVnOiBjdHg/LmRlYnVnID8/IHBhcmFtZXRlcnM/LmRlYnVnID8/IGZhbHNlXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG4iLCJpbXBvcnQgUGFkU3F1YWQgZnJvbSBcIi4vUGFkU3F1YWQudHNcIjtcbmltcG9ydCB7QWxwaW5lfSBmcm9tIFwiYWxwaW5lanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxpVGFnIHtcblxuICBwcml2YXRlICRwczogUHMuSW5zdGFuY2UuQXBwID0gbmV3IFBhZFNxdWFkKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgJHByZWxvYWQ6IFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJlbG9hZDogUHMuSW5zdGFuY2UuTW9kdWxlQ29uZmlnW10gPSBbXSkge1xuICAgIHRoaXMuJHByZWxvYWQgPSBwcmVsb2FkXG4gIH1cblxuICBwdWJsaWMgdXNlQ2FjaGUoY29uZmlnOiB7IGRlYnVnOiBib29sZWFuIH0gPSB7IGRlYnVnOiBmYWxzZSB9KTogU2ltcGxpVGFnIHtcbiAgICB0aGlzLiRwcmVsb2FkLnB1c2goPFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZ0NhY2hlPntcbiAgICAgIG5hbWU6ICdjYWNoZScsXG4gICAgICBwYXRoOiAnQHRhZy9zdXBwb3J0L2NhY2hlJyxcbiAgICAgIGNvbmZpZ1xuICAgIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyB1c2VBbHBpbmUoY29uZmlnPzogUGljazxQcy5JbnN0YW5jZS5Nb2R1bGVDb25maWdBbHBpbmUsICdjb25maWcnPik6IFNpbXBsaVRhZyB7XG4gICAgdGhpcy4kcHJlbG9hZC5wdXNoKDxQcy5JbnN0YW5jZS5Nb2R1bGVDb25maWdBbHBpbmU+e1xuICAgICAgbmFtZTogJ2FscGluZScsXG4gICAgICBwYXRoOiAnQHRhZy9zdXBwb3J0L2FscGluZScsXG4gICAgICBjb25maWdcbiAgICB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBwdWJsaWMgdXNlQXBpKGNvbmZpZzogUHMuU3VwcG9ydC5BcGkuQ29uZmlnKTogU2ltcGxpVGFnIHtcbiAgICB0aGlzLiRwcmVsb2FkLnB1c2goPFBzLkluc3RhbmNlLk1vZHVsZUNvbmZpZ0FwaT57XG4gICAgICBuYW1lOiAnYXBpJyxcbiAgICAgIHBhdGg6ICdAdGFnL3N1cHBvcnQvYXBpJyxcbiAgICAgIGNvbmZpZ1xuICAgIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyB1c2UoY29uZmlnOiBQcy5JbnN0YW5jZS5Nb2R1bGVDb25maWcpOiBTaW1wbGlUYWcge1xuICAgIHRoaXMuJHByZWxvYWQucHVzaChjb25maWcpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzdGFydCgpIHtcblxuICAgIGZvciAoY29uc3QgbW9kdWxlIG9mIHRoaXMuJHByZWxvYWQpIHtcbiAgICAgIHRoaXMuJHBzPy5wcmVsb2FkKG1vZHVsZS5wYXRoLCBtb2R1bGUubmFtZSwgbW9kdWxlLmNvbmZpZylcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLiRwcy5zdGFydCgpXG5cbiAgICB0aGlzLiRwcy5nZXQ8QWxwaW5lPignYWxwaW5lJyk/LnN0YXJ0KClcblxuICAgIHJldHVybiB0aGlzLiRwc1xuICB9XG59IiwiaW1wb3J0IFNpbXBsaVRhZyBmcm9tIFwiLi9jb3JlL1NpbXBsaVRhZy50c1wiO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlLmNzcydcblxud2luZG93LlNpbXBsaVRhZyA9IG5ldyBTaW1wbGlUYWcoKVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgKCkgPT4ge1xuICBjb25zdCB0aGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcblxuICB0aGVtZS5pbm5lclRleHQgPSBzdHlsZXNcblxuICBkb2N1bWVudC5oZWFkLmFwcGVuZCh0aGVtZSlcbn0pXG4iXSwibmFtZXMiOlsiUGFkU3F1YWQiLCJ0YWdQYXJhbXMiLCJfX3B1YmxpY0ZpZWxkIiwicGF0aENsYXNzIiwiYWxpYXMiLCJwYXJhbWV0ZXJzIiwibmFtZSIsImtleSIsImRlYnVnIiwibW9kdWxlIiwicHJvdmlkZXIiLCJjb250ZXh0IiwiZSIsImN0eCIsIlNpbXBsaVRhZyIsInByZWxvYWQiLCJjb25maWciLCJfYSIsIl9iIiwidGhlbWUiLCJzdHlsZXMiXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQXFCQSxFQUFvQztBQUFBLEVBU3ZELFlBQVlDLEdBQTJCO0FBUjlCLElBQUFDLEVBQUE7QUFDRCxJQUFBQSxFQUFBLG9CQUlGLENBQUE7QUFDRSxJQUFBQSxFQUFBLGlCQUFrQyxDQUFBO0FBR3hDLFNBQUssYUFBYUQ7QUFBQSxFQUNwQjtBQUFBLEVBRUEsUUFBUUUsR0FBbUJDLEdBQWVDLEdBRXZDO0FBQ0QsZ0JBQUssV0FBVyxLQUFLLEVBQUMsV0FBQUYsR0FBVyxPQUFBQyxHQUFPLFlBQUFDLEdBQVcsR0FDNUM7QUFBQSxFQUNUO0FBQUEsRUFHQSxNQUFNLEtBQUssRUFBQyxNQUFBQyxHQUFNLEtBQUFDLEdBQUssWUFBQUYsR0FBWSxPQUFBRyxLQUloQztBQUNHLFFBQUE7QUFDRixZQUFNLEVBQUMsU0FBU0MsTUFBVSxNQUFNLE9BQU8sR0FBR0gsQ0FBSSxRQUN4Q0ksSUFBa0MsSUFBSUQsS0FDdENFLElBQStCO0FBQUEsUUFDbkMsUUFBUTtBQUFBLFFBQ1IsT0FBQUg7QUFBQSxRQUNBLFlBQUFIO0FBQUEsTUFBQTtBQUdJLFlBQUFLLEVBQVMsU0FBU0MsQ0FBTyxHQUUvQixLQUFLLFFBQVFKLENBQUcsSUFBSSxNQUFNRyxFQUFTLEtBQUtDLENBQU87QUFBQSxhQUV4Q0MsR0FBb0I7QUFDM0IsWUFBTSxVQUFVLGtDQUFrQ04sQ0FBSSxvQkFBb0JNLENBQUMsR0FBRztBQUFBLElBQ2hGO0FBQUEsRUFDRjtBQUFBLEVBRU8sVUFBVUwsR0FBYTtBQUM1QixXQUFPLE9BQU8sS0FBSyxRQUFRQSxDQUFHLElBQU07QUFBQSxFQUN0QztBQUFBLEVBRU8sSUFBYUEsR0FBYTtBQUMvQixXQUFLLEtBQUssVUFBVUEsQ0FBRyxJQUdoQixLQUFLLFFBQVFBLENBQUcsSUFGZDtBQUFBLEVBR1g7QUFBQSxFQUVBLE1BQWEsTUFBTU0sR0FBa0M7QUFDbkQsZUFBVyxFQUFDLE9BQUFULEdBQU8sWUFBQUMsR0FBWSxXQUFBRixFQUFTLEtBQUssS0FBSztBQUNoRCxZQUFNLEtBQUssS0FBSztBQUFBLFFBQ2QsTUFBTUE7QUFBQSxRQUNOLEtBQUtDO0FBQUEsUUFDTCxZQUFBQztBQUFBLFFBQ0EsUUFBT1EsS0FBQSxnQkFBQUEsRUFBSyxXQUFTUixLQUFBLGdCQUFBQSxFQUFZLFVBQVM7QUFBQSxNQUFBLENBQzNDO0FBRUksV0FBQTtBQUFBLEVBQ1Q7QUFDRjtBQy9EQSxNQUFxQlMsRUFBVTtBQUFBLEVBSzdCLFlBQVlDLElBQXNDLElBQUk7QUFIOUMsSUFBQWIsRUFBQSxhQUF1QixJQUFJRjtBQUNsQixJQUFBRSxFQUFBLGtCQUF1QyxDQUFBO0FBR3RELFNBQUssV0FBV2E7QUFBQSxFQUNsQjtBQUFBLEVBRU8sU0FBU0MsSUFBNkIsRUFBRSxPQUFPLE1BQW9CO0FBQ3hFLGdCQUFLLFNBQVMsS0FBb0M7QUFBQSxNQUNoRCxNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixRQUFBQTtBQUFBLElBQUEsQ0FDRCxHQUNNO0FBQUEsRUFDVDtBQUFBLEVBRU8sVUFBVUEsR0FBb0U7QUFDbkYsZ0JBQUssU0FBUyxLQUFxQztBQUFBLE1BQ2pELE1BQU07QUFBQSxNQUNOLE1BQU07QUFBQSxNQUNOLFFBQUFBO0FBQUEsSUFBQSxDQUNELEdBQ007QUFBQSxFQUNUO0FBQUEsRUFFTyxPQUFPQSxHQUEwQztBQUN0RCxnQkFBSyxTQUFTLEtBQWtDO0FBQUEsTUFDOUMsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLE1BQ04sUUFBQUE7QUFBQSxJQUFBLENBQ0QsR0FDTTtBQUFBLEVBQ1Q7QUFBQSxFQUVPLElBQUlBLEdBQTZDO0FBQ2pELGdCQUFBLFNBQVMsS0FBS0EsQ0FBTSxHQUNsQjtBQUFBLEVBQ1Q7QUFBQSxFQUVBLE1BQWEsUUFBUTtBRDVDdkIsUUFBQUMsR0FBQUM7QUM4Q2UsZUFBQVQsS0FBVSxLQUFLO0FBQ3hCLE9BQUFRLElBQUEsS0FBSyxRQUFMLFFBQUFBLEVBQVUsUUFBUVIsRUFBTyxNQUFNQSxFQUFPLE1BQU1BLEVBQU87QUFHL0MsaUJBQUEsS0FBSyxJQUFJLFVBRWZTLElBQUEsS0FBSyxJQUFJLElBQVksUUFBUSxNQUE3QixRQUFBQSxFQUFnQyxTQUV6QixLQUFLO0FBQUEsRUFDZDtBQUNGOzs7QUNyREEsT0FBTyxZQUFZLElBQUlKO0FBRXZCLE9BQU8saUJBQWlCLGFBQWEsTUFBTTtBQUNuQyxRQUFBSyxJQUFRLFNBQVMsY0FBYyxPQUFPO0FBRTVDLEVBQUFBLEVBQU0sWUFBWUMsR0FFVCxTQUFBLEtBQUssT0FBT0QsQ0FBSztBQUM1QixDQUFDOyJ9
