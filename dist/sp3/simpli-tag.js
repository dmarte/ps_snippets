var l = Object.defineProperty;
var p = (s, t, e) => t in s ? l(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;
var n = (s, t, e) => (p(s, typeof t != "symbol" ? t + "" : t, e), e);
class u {
  constructor(t) {
    n(this, "$tagParams");
    n(this, "$providers", []);
    n(this, "$loaded", {});
    this.$tagParams = t;
  }
  preload(t, e, a) {
    return this.$providers.push({ pathClass: t, alias: e, parameters: a }), this;
  }
  async load({ name: t, key: e, parameters: a, debug: i }) {
    try {
      const { default: r } = await import(`${t}.js`), o = new r(), d = {
        engine: this,
        debug: i,
        parameters: a
      };
      await o.register(d), this.$loaded[e] = await o.boot(d);
    } catch (r) {
      throw TypeError(`[PadSquad:Core] Unable to load ${t}, got a message:"${r}"`);
    }
  }
  isMounted(t) {
    return typeof this.$loaded[t] < "u";
  }
  get(t) {
    return this.isMounted(t) ? this.$loaded[t] : null;
  }
  async start(t) {
    for (const { alias: e, parameters: a, pathClass: i } of this.$providers)
      await this.load({
        name: i,
        key: e,
        parameters: a,
        debug: (t == null ? void 0 : t.debug) ?? (a == null ? void 0 : a.debug) ?? !1
      });
    return this;
  }
}
class h {
  constructor(t = []) {
    n(this, "$ps", new u());
    n(this, "$preload", []);
    this.$preload = t;
  }
  useCache(t = { debug: !1 }, e) {
    return this.$preload.push({
      name: "cache",
      path: e ?? "@tag/support/cache",
      config: t
    }), this;
  }
  useAnimate(t = { debug: !1 }, e) {
    return this.$preload.push({
      name: "animate",
      path: e ?? "@tag/support/animate",
      config: t
    }), this;
  }
  useAlpine(t, e) {
    return this.$preload.push({
      name: "alpine",
      path: e ?? "@tag/support/alpine",
      config: t
    }), this;
  }
  useApi(t) {
    return this.$preload.push({
      name: "api",
      path: "@tag/support/api",
      config: t
    }), this;
  }
  use(t) {
    return this.$preload.push(t), this;
  }
  on(t, e) {
    return !t || !e ? this : (document.addEventListener(t, (a) => e(a == null ? void 0 : a.detail)), this);
  }
  track(t) {
    return this.on("hotspot:click", ({ data: e }) => {
      var a, i, r, o;
      t != null && t.debug && console.log("[PadSquad]:hotspot:click", e), (a = window == null ? void 0 : window.airtory) != null && a.track && ((i = window.airtory) == null || i.track(e.label)), window.__simpli && ((o = (r = window.__simpli) == null ? void 0 : r.analytics()) == null || o.trackClickEvent(e.label, e.asset, e.url));
    });
  }
  async start() {
    var t, e;
    for (const a of this.$preload)
      (t = this.$ps) == null || t.preload(a.path, a.name, a.config);
    return await this.$ps.start(), (e = this.$ps.get("alpine")) == null || e.start(), this.$ps;
  }
}
const c = `[x-cloak]{display:none!important}
`;
window.SimpliTag = new h();
window.addEventListener("loadstart", () => {
  const s = document.createElement("style");
  s.innerText = c, document.head.append(s);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
