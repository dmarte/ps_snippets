var g = Object.defineProperty;
var y = (e, t, s) => t in e ? g(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s;
var h = (e, t, s) => (y(e, typeof t != "symbol" ? t + "" : t, s), s);
import $ from "../libs/lib-alpine.js";
const p = {
  name: "spot",
  handler(e, { expression: t, modifiers: s }, { evaluate: c, cleanup: l }) {
    var a;
    if (!(e instanceof HTMLElement))
      return;
    const v = (n) => {
      var r, o;
      document.dispatchEvent(
        new CustomEvent("hotspot:click", {
          bubbles: !0,
          detail: {
            data: {
              asset: `${(n == null ? void 0 : n.asset) ?? e.dataset.asset ?? e.id}`,
              label: `${(n == null ? void 0 : n.label) ?? ((r = e.dataset) == null ? void 0 : r.label) ?? ""}`,
              url: `${(n == null ? void 0 : n.url) ?? ((o = e.dataset) == null ? void 0 : o.url) ?? ""}`
            },
            el: e
          }
        })
      );
    }, b = (n) => {
      var r, o;
      document.dispatchEvent(
        new CustomEvent("hotspot:interaction", {
          bubbles: !0,
          detail: {
            data: {
              asset: `${(n == null ? void 0 : n.asset) ?? e.dataset.asset ?? e.id}`,
              label: `${(n == null ? void 0 : n.label) ?? ((r = e.dataset) == null ? void 0 : r.label) ?? ""}`,
              eventName: `${(n == null ? void 0 : n.eventName) ?? ((o = e.dataset) == null ? void 0 : o.eventName) ?? ""}`
            },
            el: e
          }
        })
      );
    }, u = () => {
      const n = c(t);
      s.includes("click") && v(n), s.includes("interaction") && b(n);
    }, i = document.createElement("div");
    i.style.width = `${e.clientWidth}px`, i.style.height = `${e.clientHeight}px`, i.style.position = "absolute", i.addEventListener("click", u), l(() => {
      i.removeEventListener("click", u);
    }), (a = e == null ? void 0 : e.style) != null && a.position || (e.style.position = "relative"), e.prepend(i);
  }
}, d = {
  getWeekDayShortName: (e) => [
    "Sun",
    "Mon",
    "Tue",
    "Wen",
    "Thu",
    "Fri",
    "Sat"
  ][e] ?? "",
  getMonthShortName: (e) => ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][e] ?? "",
  asDMy(e) {
    return `${this.getWeekDayShortName(e.getDay())}, ${this.getMonthShortName(e.getMonth())} ${e.getFullYear().toString().substring(2)}`;
  },
  format(e, t = "DMy") {
    return this[`as${t}`] ? this[`as${t}`](e) : "";
  }
}, m = {
  name: "date-format",
  handler(e, { modifiers: t, expression: s }, { evaluate: c }) {
    if (e instanceof HTMLElement) {
      t.length < 1 && (t[0] = "DMy");
      try {
        const l = /* @__PURE__ */ new Date(`${c(s)}` ?? e.textContent);
        e.innerText = d.format(l, t[0]);
      } catch {
        return;
      }
    }
  }
};
class M {
  constructor() {
    h(this, "alpine", $);
  }
  boot({ debug: t }) {
    return t && console.log("[PadSquad]:Alpine service BOOTED."), this.alpine;
  }
  key() {
    return "alpine";
  }
  async register({ debug: t }) {
    t && console.log("[PadSquad]:Alpine service REGISTERED."), this.alpine.directive(p.name, p.handler), this.alpine.directive(m.name, m.handler);
  }
}
export {
  M as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
