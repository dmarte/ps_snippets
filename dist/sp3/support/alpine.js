var l = Object.defineProperty;
var h = (e, t, n) => t in e ? l(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;
var o = (e, t, n) => (h(e, typeof t != "symbol" ? t + "" : t, n), n);
import u from "../libs/lib-alpine.js";
const s = {
  name: "spot",
  handler(e, { expression: t }, { evaluate: n, cleanup: a }) {
    if (!(e instanceof HTMLElement))
      return;
    const i = () => {
      n(t);
    }, r = document.createElement("div");
    r.style.width = `${e.clientWidth}px`, r.style.height = `${e.clientHeight}px`, r.style.position = "absolute", r.addEventListener("click", i), r.addEventListener("touchend", i), a(() => {
      r.removeEventListener("click", i), r.removeEventListener("touchend", i);
    }), e.computedStyleMap().get("position") || (e.style.position = "relative"), e.prepend(r);
  }
}, d = {
  getWeekDayShortName: (e) => [
    "Sun",
    "Mon",
    "Tue",
    "Wen",
    "Thu",
    "Fri",
    "Sat"
  ][e] ?? "",
  getMonthShortName: (e) => ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][e] ?? "",
  asDMy(e) {
    return `${this.getWeekDayShortName(e.getDay())}, ${this.getMonthShortName(e.getMonth())} ${e.getFullYear().toString().substring(2)}`;
  },
  format(e, t = "DMy") {
    return this[`as${t}`] ? this[`as${t}`](e) : "";
  }
}, c = {
  name: "date-format",
  handler(e, { modifiers: t, expression: n }, { evaluate: a }) {
    if (e instanceof HTMLElement) {
      t.length < 1 && (t[0] = "DMy");
      try {
        const i = /* @__PURE__ */ new Date(`${a(n)}` ?? e.textContent);
        e.innerText = d.format(i, t[0]);
      } catch {
        return;
      }
    }
  }
};
class g {
  constructor() {
    o(this, "alpine", u);
  }
  boot({ debug: t }) {
    return t && console.log("[PadSquad]:Alpine service BOOTED."), this.alpine;
  }
  key() {
    return "alpine";
  }
  async register({ debug: t }) {
    t && console.log("[PadSquad]:Alpine service REGISTERED."), this.alpine.directive(s.name, s.handler), this.alpine.directive(c.name, c.handler);
  }
}
export {
  g as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaW5lLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9EaXJlY3RpdmVzL1Nwb3QudHMiLCIuLi8uLi9zcmMvY29yZS9EaXJlY3RpdmVzL0RhdGVGb3JtYXQudHMiLCIuLi8uLi9zcmMvY29yZS9Qcm92aWRlcnMvQWxwaW5lUHJvdmlkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgPFBzLkFscGluZS5EaXJlY3RpdmU+e1xuICBuYW1lOiAnc3BvdCcsXG4gIGhhbmRsZXIoZWwsIHtleHByZXNzaW9ufSwge2V2YWx1YXRlLCBjbGVhbnVwfSkge1xuICAgIGlmICghKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGV2YWx1YXRlKGV4cHJlc3Npb24pXG4gICAgfVxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgZGl2LnN0eWxlLndpZHRoID0gYCR7ZWwuY2xpZW50V2lkdGh9cHhgXG4gICAgZGl2LnN0eWxlLmhlaWdodCA9IGAke2VsLmNsaWVudEhlaWdodH1weGBcbiAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG5cbiAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKVxuICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZXIpXG5cbiAgICBjbGVhbnVwKCgpID0+IHtcbiAgICAgIGRpdi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpXG4gICAgICBkaXYucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVyKVxuICAgIH0pXG5cbiAgICBpZiAoIWVsLmNvbXB1dGVkU3R5bGVNYXAoKS5nZXQoJ3Bvc2l0aW9uJykpIHtcbiAgICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJ1xuICAgIH1cbiAgICBlbC5wcmVwZW5kKGRpdilcbiAgfVxufVxuXG5cbiIsIlxuY29uc3QgdXRpbHMgPSB7XG4gIGdldFdlZWtEYXlTaG9ydE5hbWU6ICh3ZWVrRGF5OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBfXyA9IFtcbiAgICAgICdTdW4nLFxuICAgICAgJ01vbicsXG4gICAgICAnVHVlJyxcbiAgICAgICdXZW4nLFxuICAgICAgJ1RodScsXG4gICAgICAnRnJpJyxcbiAgICAgICdTYXQnLFxuICAgIF1cbiAgICByZXR1cm4gX19bd2Vla0RheV0gPz8gJydcbiAgfSxcbiAgZ2V0TW9udGhTaG9ydE5hbWU6IChtb250aDogbnVtYmVyKSA9PiB7XG4gICAgY29uc3QgX18gPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ11cbiAgICByZXR1cm4gX19bbW9udGhdID8/ICcnXG4gIH0sXG4gIGFzRE15KGRhdGU6IERhdGUpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRXZWVrRGF5U2hvcnROYW1lKGRhdGUuZ2V0RGF5KCkpfSwgJHt0aGlzLmdldE1vbnRoU2hvcnROYW1lKGRhdGUuZ2V0TW9udGgoKSl9ICR7ZGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfWBcbiAgfSxcbiAgZm9ybWF0KGRhdGU6IERhdGUsIGZvcm1hdDogJ0RNeScgPSAnRE15Jykge1xuICAgIGlmICh0aGlzW2BhcyR7Zm9ybWF0fWBdKSB7XG4gICAgICByZXR1cm4gdGhpc1tgYXMke2Zvcm1hdH1gXShkYXRlKVxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgPFBzLkFscGluZS5EaXJlY3RpdmU+e1xuICBuYW1lOiAnZGF0ZS1mb3JtYXQnLFxuICBoYW5kbGVyKGVsLCB7bW9kaWZpZXJzLGV4cHJlc3Npb259LCB7ZXZhbHVhdGV9KSB7XG4gICAgaWYgKCEoZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZihtb2RpZmllcnMubGVuZ3RoIDwgMSkge1xuICAgICAgbW9kaWZpZXJzWzBdID0gJ0RNeSdcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtldmFsdWF0ZShleHByZXNzaW9uKX1gID8/IGVsLnRleHRDb250ZW50KVxuICAgICAgZWwuaW5uZXJUZXh0ID0gdXRpbHMuZm9ybWF0KGRhdGUsIG1vZGlmaWVyc1swXSBhcyBhbnkpXG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgQWxwaW5lIGZyb20gJ2FscGluZWpzJ1xuaW1wb3J0IHNwb3QgZnJvbSBcIi4uL0RpcmVjdGl2ZXMvU3BvdC50c1wiO1xuaW1wb3J0IGRhdGVGb3JtYXQgZnJvbSBcIi4uL0RpcmVjdGl2ZXMvRGF0ZUZvcm1hdC50c1wiO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWxwaW5lUHJvdmlkZXIgaW1wbGVtZW50cyBQcy5Qcm92aWRlci5JbnRlcmZhY2Uge1xuICBwcm90ZWN0ZWQgYWxwaW5lID0gQWxwaW5lXG5cbiAgYm9vdCh7ZGVidWd9OiBQcy5Qcm92aWRlci5Db250ZXh0KTogYW55IHtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbUGFkU3F1YWRdOkFscGluZSBzZXJ2aWNlIEJPT1RFRC4nKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hbHBpbmVcbiAgfVxuXG4gIGtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcImFscGluZVwiO1xuICB9XG5cbiAgYXN5bmMgcmVnaXN0ZXIoe2RlYnVnfTogUHMuUHJvdmlkZXIuQ29udGV4dCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ1tQYWRTcXVhZF06QWxwaW5lIHNlcnZpY2UgUkVHSVNURVJFRC4nKVxuICAgIH1cblxuICAgIHRoaXMuYWxwaW5lLmRpcmVjdGl2ZShzcG90Lm5hbWUsIHNwb3QuaGFuZGxlcilcbiAgICB0aGlzLmFscGluZS5kaXJlY3RpdmUoZGF0ZUZvcm1hdC5uYW1lLCBkYXRlRm9ybWF0LmhhbmRsZXIpXG4gIH1cbn0iXSwibmFtZXMiOlsic3BvdCIsImVsIiwiZXhwcmVzc2lvbiIsImV2YWx1YXRlIiwiY2xlYW51cCIsImhhbmRsZXIiLCJkaXYiLCJ1dGlscyIsIndlZWtEYXkiLCJtb250aCIsImRhdGUiLCJmb3JtYXQiLCJkYXRlRm9ybWF0IiwibW9kaWZpZXJzIiwiQWxwaW5lUHJvdmlkZXIiLCJfX3B1YmxpY0ZpZWxkIiwiQWxwaW5lIiwiZGVidWciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFvQ0EsSUFBQTtBQUFBLEVBQ2xDLE1BQU07QUFBQSxFQUNOLFFBQVFDLEdBQUksRUFBQyxZQUFBQyxLQUFhLEVBQUMsVUFBQUMsR0FBVSxTQUFBQyxLQUFVO0FBQ3pDLFFBQUEsRUFBRUgsYUFBYztBQUNsQjtBQUVGLFVBQU1JLElBQVUsTUFBTTtBQUNwQixNQUFBRixFQUFTRCxDQUFVO0FBQUEsSUFBQSxHQUVmSSxJQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLElBQUFBLEVBQUksTUFBTSxRQUFRLEdBQUdMLEVBQUcsV0FBVyxNQUNuQ0ssRUFBSSxNQUFNLFNBQVMsR0FBR0wsRUFBRyxZQUFZLE1BQ3JDSyxFQUFJLE1BQU0sV0FBVyxZQUVqQkEsRUFBQSxpQkFBaUIsU0FBU0QsQ0FBTyxHQUNqQ0MsRUFBQSxpQkFBaUIsWUFBWUQsQ0FBTyxHQUV4Q0QsRUFBUSxNQUFNO0FBQ1IsTUFBQUUsRUFBQSxvQkFBb0IsU0FBU0QsQ0FBTyxHQUNwQ0MsRUFBQSxvQkFBb0IsWUFBWUQsQ0FBTztBQUFBLElBQUEsQ0FDNUMsR0FFSUosRUFBRyxpQkFBbUIsRUFBQSxJQUFJLFVBQVUsTUFDdkNBLEVBQUcsTUFBTSxXQUFXLGFBRXRCQSxFQUFHLFFBQVFLLENBQUc7QUFBQSxFQUNoQjtBQUNGLEdDMUJNQyxJQUFRO0FBQUEsRUFDWixxQkFBcUIsQ0FBQ0MsTUFDVDtBQUFBLElBQ1Q7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUFBLEVBRVFBLENBQU8sS0FBSztBQUFBLEVBRXhCLG1CQUFtQixDQUFDQyxNQUNQLENBQUMsT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLEtBQUssRUFDcEZBLENBQUssS0FBSztBQUFBLEVBRXRCLE1BQU1DLEdBQVk7QUFDVCxXQUFBLEdBQUcsS0FBSyxvQkFBb0JBLEVBQUssUUFBUSxDQUFDLEtBQUssS0FBSyxrQkFBa0JBLEVBQUssVUFBVSxDQUFDLElBQUlBLEVBQUssWUFBQSxFQUFjLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUFBLEVBQzdJO0FBQUEsRUFDQSxPQUFPQSxHQUFZQyxJQUFnQixPQUFPO0FBQ3hDLFdBQUksS0FBSyxLQUFLQSxDQUFNLEVBQUUsSUFDYixLQUFLLEtBQUtBLENBQU0sRUFBRSxFQUFFRCxDQUFJLElBRTFCO0FBQUEsRUFDVDtBQUNGLEdBQ29DRSxJQUFBO0FBQUEsRUFDbEMsTUFBTTtBQUFBLEVBQ04sUUFBUVgsR0FBSSxFQUFDLFdBQUFZLEdBQVUsWUFBQVgsRUFBYSxHQUFBLEVBQUMsVUFBQUMsS0FBVztBQUMxQyxRQUFFRixhQUFjLGFBR2pCO0FBQUEsTUFBQVksRUFBVSxTQUFTLE1BQ3BCQSxFQUFVLENBQUMsSUFBSTtBQUViLFVBQUE7QUFDSSxjQUFBSCx3QkFBVyxLQUFLLEdBQUdQLEVBQVNELENBQVUsQ0FBQyxNQUFNRCxFQUFHLFdBQVc7QUFDakUsUUFBQUEsRUFBRyxZQUFZTSxFQUFNLE9BQU9HLEdBQU1HLEVBQVUsQ0FBQyxDQUFRO0FBQUEsTUFBQSxRQUMvQztBQUNOO0FBQUEsTUFDRjtBQUFBO0FBQUEsRUFDRjtBQUNGO0FDekNBLE1BQXFCQyxFQUFnRDtBQUFBLEVBQXJFO0FBQ1ksSUFBQUMsRUFBQSxnQkFBU0M7QUFBQUE7QUFBQUEsRUFFbkIsS0FBSyxFQUFDLE9BQUFDLEtBQWtDO0FBQ3RDLFdBQUlBLEtBQ0YsUUFBUSxJQUFJLG1DQUFtQyxHQUUxQyxLQUFLO0FBQUEsRUFDZDtBQUFBLEVBRUEsTUFBYztBQUNMLFdBQUE7QUFBQSxFQUNUO0FBQUEsRUFFQSxNQUFNLFNBQVMsRUFBQyxPQUFBQSxLQUE0QztBQUMxRCxJQUFJQSxLQUNGLFFBQVEsSUFBSSx1Q0FBdUMsR0FHckQsS0FBSyxPQUFPLFVBQVVqQixFQUFLLE1BQU1BLEVBQUssT0FBTyxHQUM3QyxLQUFLLE9BQU8sVUFBVVksRUFBVyxNQUFNQSxFQUFXLE9BQU87QUFBQSxFQUMzRDtBQUNGOyJ9
